#pragma checksum "C:\Users\Cagol\source\repos\MyPortfolio\MyPortfolio\Views\Home\Projects.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e167e9ab7292d1dde7ffd2f85f3c81faa39c1295"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Projects), @"mvc.1.0.view", @"/Views/Home/Projects.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Cagol\source\repos\MyPortfolio\MyPortfolio\Views\_ViewImports.cshtml"
using MyPortfolio;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Cagol\source\repos\MyPortfolio\MyPortfolio\Views\_ViewImports.cshtml"
using MyPortfolio.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e167e9ab7292d1dde7ffd2f85f3c81faa39c1295", @"/Views/Home/Projects.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e737d9fd9d0060a089574eb594240e3956f238bf", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Projects : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Cagol\source\repos\MyPortfolio\MyPortfolio\Views\Home\Projects.cshtml"
  
    ViewData["Title"] = "My Projects";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""instruction keyword2"" id=""instruction"">
    <a onclick=""document.getElementById('instruction').style.display = 'none'"">
        Click and drag to scroll | Click this message to dismiss
    </a>
</div>
<div class=""test"" id=""portfolio"">
    <div class=""portfoliowrapper"" id=""cardview"">
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Portfolio</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"" alt=""Sorry!                                      There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry!                                    There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg""                          ");
            WriteLiteral(@"                                      alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg"" alt=""Sorry!                                                            There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg""                                                                alt=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                
                <div class=""itemshortdetail"">
                   My Portfolio website and also the website you are on! This website served as a culmination of my skills thus far in my coding journey. Everything you see was made from scratch. This website is also my playground to test out the new things I learn, both on the front-end and back-end.
                </div>
                <d");
            WriteLiteral(@"iv class=""itemdetail"">
                    <div class=""itemdetailimage"">
                        <img src=""\images\portfolio\main\home.jpg"" />
                        <img src=""\images\portfolio\main\portfolio.jpg"" />
                        <img src=""\images\portfolio\main\portfoliodetails.jpg"" />
                    </div>
                    <div>
                         &nbsp;&nbsp;&nbsp;&nbsp; My Portfolio website and also the website you are on! This website served as a culmination of my skills thus far in my coding journey. Everything you see was made from scratch. This website is also my playground to test out the new things I learn, both on the front-end and back-end. As listed, I used a combination of HTML5, CSS, Javascript(jQuery and AJAX) for the front end development and C# and ASP.NETCore for the back end. Before jumping into the nitty-gritty, I'd like to outline the purpose and task-list.
                    </div>                  
                    <div>
                        <");
            WriteLiteral(@"dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn><br />
                        &nbsp;&nbsp;&nbsp;&nbsp;The purpose of this project was to create a fluid, responsive website that showcased a summation of all the skills I have thus far collected. In my previous projects, I had (for individual projects) implemented various features seen on this site in different forms. For example - I had build and ASP.NET Core site and, in different projects, used Swup (page transition library used on this page) to static pages. Here, I had to learn how to utilize npm packages within the .NET Core framework, which was a challenege in its own right. The end-goal here was to have a robust, presentable website to display what I can do - everything you see (and don't see) is made from scratch from hours of tireless and focused study.
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn><br />
                        &nbsp;&nbs");
            WriteLiteral(@"p;&nbsp;&nbsp;There were a few challenges I came across during development. I've categorized them into two boxes:<br>
                        &nbsp;&nbsp;&nbsp;&nbsp;1. Things that I 'know' how to do, but understand to be less than optimal in terms of efficiency. Alternatively, also things that I know how to do, but need to implement. I'll use Page Transitions (PT for short) as an example again. In my past I have used Barba.js and Highway.js to implement the PT effects. I found myself uncertain with how to fully integrate a Node.js frontend to a .NET Core backend, and swup was a decent medium. That said, the method by which Swup manages the DOM node tree is not optimal, and behind some of the animations I had to implement 'hidden' page reloads that can be noticed if you look closely enough.  <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;2. Things which I simply do not yet know how to do. These items could be broken down into their own categories but for simplicities sake I will say these are generall");
            WriteLiteral(@"y the things I am currently in the process of learning but do not feel 100% confident in. If I had to put it plainly - for list one items I could create/recreate these without referencing any external materials. For category 2 items, I would need Google open in the background(don't we all?). These are things I know, with high levels of certainty, that are able to improve various features of my website. An example would be moving my website to a full Node.js environment to allow easier use of npm packages, as well as a much more robust experience with simpler React integration.

                        <div class=""todocontainer"">
                            <ul> 
                                <lh>Know Hows</lh>    
                                <li>1. Fix animation for opening 'detailed' view of Project page items.</li>
                                <li>2. Dynamically serve content via JS/Ajax instead of hard-coding through CSS.</li>
                                <li>3. Tune the bells and whistl");
            WriteLiteral(@"es - optimize transition timings, etc.</li>
                            </ul>
                            <ul>
                                <lh>Don't Know Hows</lh>
                                <li>1. Migrate site onto a Node.js environment</li>
                                <li>2. Utilize React to create more fluid animations and effects </li>
                            </ul> 
                        </div>
                        <div>
                            <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn><br />
                            &nbsp;&nbsp;&nbsp;&nbsp;Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 6988, "\"", 6995, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>.<br>
                            
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
                <img src=""\images\portfolio\main\home.jpg"" />
                <img src=""\images\portfolio\main\portfolio.jpg"" />
                <img src=""\images\portfolio\main\portfoliodetails.jpg"" />
                <img src=""\images\portfolio\main\java\1.jpg"" />
                <img src=""\images\portfolio\main\java\2.jpg"" />
                <img src=""\images\portfolio\main\java\3.jpg"" />
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Theatre Webpage</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"" alt=""Sorry! There was an issue!"" />
                ");
            WriteLiteral(@"    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg"" alt=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    During the second live-project at The Tech Academy, I worked with C# and the ASP.NET Framework to help develop features on a local Portland theatre. Features I implemented were a Movie Rentals catalogue with full CRUD capabilities, as well as designing and impl");
            WriteLiteral(@"ementing a comment system with asyncronous AJAX functionality.
                </div>
                <div class=""itemdetail"">
                    <div>
                        During the second live-project at The Tech Academy, I worked with C# and the ASP.NET Framework to help develop features on a local Portland theatre. Features I implemented were a Movie Rentals catalogue with full CRUD capabilities, as well as designing and implementing a comment system with asyncronous AJAX functionality.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
                        The purpose of this project was to simulate a live development environment facing most, if not all of the constraints one may face on the job. This was conducted within the Agile framework and using Azure DevOps. My peers and I were assigned stories to implement various features, and we were giving a timeline of completion. F");
            WriteLiteral(@"urthermore, we could not modify or overide default classes or features to preserve continuity, and at points had to be creative in our solutions to make things work. During the two weeks, I implemented a Rental Catalogue using custom cards that would allow users to add and remove movies from a directory. The movies could be filtered and searched by title and by keywords in the description. Upon completion of this, I was then tasked with creating a ""comments"" section partial view to be utilized in a blog section my peer was working on. These comment boxes used AJAX to dynamically update likes/dislikes and also reflect the ratio change on a ratio bar. 
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn>
                        While I am happy with how much I was able to get done in two weeks, I found myself faced with so many opportunities for progress that I decided to branch the repository and continue working on thi");
            WriteLiteral(@"s in my free time (with permission, of course!). 

                        <div class=""todocontainer"">
                            <ul> 
                                <lh>Know Hows</lh>    
                                <li>1. Implement Comment replies</li>
                                <li>2. Implement recursive delete functionality to delete all related comments when parent is deleted (one constraint I was given was to not create a new class!)</li>
                                <li>3. Create a User Moderator (or Admin) and implement authentication to only allow registered users to make posts.</li>
                                <li>4. Connect comments to user profile so they could be searched.</li>
                            </ul>
                            <ul>
                                <lh>Don't Know Hows</lh>
                                <li>Glad to say this list is empty for now. :)</li>
                                <li></li>
                            </ul>
      ");
            WriteLiteral(@"                  </div>
                        <div>
                            <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 12480, "\"", 12487, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Zoo Database</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mysql/mysql-original.svg"" alt");
            WriteLiteral(@"=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    During this project, I created and queried a basic database utilizing an increasing complexity of queries to get more refined and specific results.
                </div>
                <div class=""itemdetail"">
                    <div>
                        During this project, I created and queried a basic database utilizing an increasing complexity of queries to get more refined and specific results.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
                        The purpose of this project was to get a deeper understanding of relational databases and the methods by which I can query them. Aside from querying the database with an increasing gradient of complexi");
            WriteLiteral(@"ty, a major point of interest was stored procedures and how to 
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn>
                        Nothing! This project was simply an introduction to SQL early on in my coding journey. Since then I have learned more practical and efficient ways to query databases (ie. SQlite with Python) for the needs I currently may have. That said, the importance of SQL is not lost on me - data and the increasing importance of it in our world is one of the reasons I originally decided to start coding. I currently spend my time studying and learning the core fundamentals of SQL itself.
                        <div>
                            <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions,");
            WriteLiteral(" I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 15587, "\"", 15594, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Task Tracker</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"" alt");
            WriteLiteral(@"=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original-wordmark.svg"" alt=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    A simple task tracker created using React to dynamically update the forms. Utilized various components to create a scaleable and replicable template for any given webpage.
                </div>
                <div class=""itemdetail"">
                    <div>
                        A simple task tracker created using React to dynamically update the ");
            WriteLiteral(@"forms. Utilized various components to create a scaleable and replicable template for any given webpage.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
                        The purpose of this project was to learn the basics of React! Though my skills with React are far improved from what I showcased with this task tracker, this was a very important project for me in that it introduced me to many important React features (PropTypes, components, etc). 
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn>
                        While there are no direct to-dos, the concepts learned here have been greatly expanded on, and currently I am working with React Router DOMS among a few other things to gather a more complete understanding of the library.
                        <div>
                      ");
            WriteLiteral(@"      <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 18952, "\"", 18959, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Task Tracker</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"" alt");
            WriteLiteral(@"=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"" alt=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    A Javascript Tic-Tac-Toe game created leveraging HTML Canvas. Includes basic computer vs player features.
                </div>
                <div class=""itemdetail"">
                    <div>
                        A Javascript Tic-Tac-Toe game created leveraging HTML Canvas. Includes basic computer vs player features.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
             ");
            WriteLiteral(@"            
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn>
                        

                        <div class=""todocontainer"">
                            <ul>
                                
                                <li>hello</li>
                                <li>test</li>
                            </ul>
                            <ul>
                                <li>hello</li>
                                <li>test</li>
                            </ul> 
                        </div>
                        <div>
                            <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 21980, "\"", 21987, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Car Insurance App</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg");
            WriteLiteral(@""" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dotnetcore/dotnetcore-original.svg"" alt=""Sorry! There was an issue!"" />
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    A C# and ASP.NET based Car Insurance website. Utilizes CRUD functionality and business logic to determine a quote based on a series of preset conditions to provide a quote to a client. Admins can then view ");
            WriteLiteral(@"provided quotes within an admin dashboard.
                </div>
                <div class=""itemdetail"">
                    <div>
                        A C# and ASP.NET based Car Insurance website. Utilizes CRUD functionality and business logic to determine a quote based on a series of preset conditions to provide a quote to a client. Admins can then view provided quotes within an admin dashboard.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
                        The purpose of this project was to introduce myself to the complexities of the .NET framework. I learned many important concepts here. Above all else, I would likely cite the MVC model as the most valuable takeway. I created a basic car insurance app that used basic business logic to provide a quote. 
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""");
            WriteLiteral(@"keyword2"">::to-dos</dfn>
                        While there are no to-dos for this project itself, there were many points I saw I could build upon. For example, the form requested information from users that would better be gathered from a reputable source (maybe the user forgot about a speeding ticket they got?). Querying official databases to get this information, or querying external sources for information verification is a big point of interest here, and one which I am looking to practice in a project or live environment!
                        <div>
                            <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 25934, "\"", 25941, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
        <div class=""portfoliocard"">
            <section></section>
            <span></span>
            <div class=""portfoliocontent"">
                <h2>Django Webpage</h2>
                <div class=""skillsused"">
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg"" a");
            WriteLiteral(@"lt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg"" alt=""Sorry! There was an issue!"" />
                    <img src=""https://cdn.jsdelivr.net/gh/devicons/devicon/icons/python/python-original.svg"" alt=""Sorry! There was an issue!"" />
                    <svg viewBox=""0 0 128 128"" height=""40"" width=""40"" fill=""green"">
                        <path d=""M59.448 0h20.93v96.88c-10.737 2.04-18.62 2.855-27.181 2.855-25.551-.001-38.87-11.551-38.87-33.705 0-21.338 14.135-35.2 36.015-35.2 3.398 0 5.98.272 9.106 1.087zm0 48.765c-2.446-.815-4.485-1.086-7.067-1.086-10.6 0-16.717 6.523-16.717 17.939 0 11.145 5.845 17.26 16.582 17.26 2.309 0 4.212-.136 7.202-.542z""></path>
                        <path d=""M113.672 32.321V80.84c0 16.717-1.224 24.735-4.893 31.666-3.398 6.661-7.883 10.87");
            WriteLiteral(@"3-17.124 15.494l-19.435-9.241c9.242-4.35 13.726-8.153 16.58-14 2.99-5.979 3.943-12.91 3.943-31.122V32.321zM92.742.111h20.93v21.474h-20.93z""></path>
                    </svg>
                </div>
                <button id=""returnbtn"" class=""returnbutton"" type=""button"" >return</button>
                <div class=""itemshortdetail"">
                    A mockup Portfolio website created during a two week live project within the Agile framework. Using Django, I developed Django Apps that added functionality such as a Blog, User Authentication, and API queries.
                </div>
                <div class=""itemdetail"">
                    <div>
                        A mockup Portfolio website created during a two week live project within the Agile framework. Using Django, I developed Django Apps that added functionality such as a Blog, User Authentication, and API queries. There were features such as a dynamic home page that showed you news articles from the computer science field, a blog with f");
            WriteLiteral(@"ull CRUD capabilities behind user authentication and a comment section. Though it is not yet complete, the functionality has also been implemented to dynamically change the theme of the website based on the weather conditions of their captured IP address.
                    </div>
                    
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::Purpose</dfn>
                        The purpose of this project was to put into practice everything I had learned about django up until the starting point. A few of the things I did are: <br> 1. Used the Django MVT framework to create both class-based views and method-based views.<br>2. Created an admin dashboard to allow myself to manage users. <br> 3. Created a User model that rendered different content on each page depending on 'permissions.
                    </div>
                    <div>
                        <dfn style=""font-size: 1.5rem;"" class=""keyword2"">::to-dos</dfn>
                  ");
            WriteLiteral(@"      There are a few things I would like to do here to get a deeper grasp of Django 

                        <div class=""todocontainer"">
                            <ul> 
                                <lh>Know Hows</lh>    
                                <li>1. Implement Comment replies</li>
                                <li>2. Add functionality to the user profile page</li>
                                <li>3. Currently only one theme (rainy day) has been coded. Need to write the CSS for other themes</li>
                                <li>4. Connect comments to user profile so they could be searched.</li>
                            </ul>
                            <ul>
                                <lh>Don't Know Hows</lh>
                                <li>Django is a strongsuit for me. There is not much I have found myself unable to do, but I'll update the list when I do :)</li>
                            </ul>
                        </div>
                        <div>
  ");
            WriteLiteral(@"                          <dfn class=""keyword2"" style=""font-size: 1.5rem;"">::Code</dfn>
                            Now for the fun part! The code for this website can be found <a href=""#"">on my GitHub</a>, but I will walk through it in brief here. If you've got any questions, I can always be reached <a");
            BeginWriteAttribute("href", " href=\"", 31367, "\"", 31374, 0);
            EndWriteAttribute();
            WriteLiteral(@">here</a>
                        
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""images"">
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Minima saepe assumenda culpa recusandae. Fuga, officia ea harum, possimus aperiam totam id doloribus reprehenderit voluptate adipisci nulla perferendis. Numquam, doloremque. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius impedit et commodi perspiciatis autem. Exercitationem laudantium earum excepturi labore obcaecati quod enim? Incidunt reprehenderit quam consequatur laboriosam nostrum modi fugiat?
        </div>
    </div>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
